% CREATED for simple verification of obtained signal. Changed from
% SIMPLE_PLOT_TIME_DIR_20170120; where the goal is to have a script able to
% take all files from dirrectory and save the graph with time according to
% the sampling frequency for each file without the need to open each and
% every file manualy.

%% NAČTĚNÍ DAT
clc; 
close all;
clear;

    
%set(0,'DefaulttextInterpreter','none')   % default nonTeX text interpreter - Graph title appearance
  set(groot, 'DefaultTextInterpreter', 'none')
      set(groot, 'DefaultLegendInterpreter', 'none')
                             
 [filename,filepath]=uigetfile({'*.*','csv'},... % manual gie choice of folder (and files inside)
                      'Select reference Data File ');
                      cd(filepath);
                      
fileList = dir(filepath);                  
fileList = fileList(~[fileList.isdir]); %remove directories
[junk, sortorder] = sort([fileList.datenum]);
fileList = fileList(sortorder); %list is now in ascending date order
numfiles = numel(fileList);
In = cell(numfiles,1);

   %% sampling frequency estimation
 prompt = {'Sampling frequency of chosen file [Hz]','Start_time[sec]','Duration [sec]'};
            dlg_title = ['Parameters input','Start_time','Duration'];
                    num_lines = 1;
                    def = {'1000','630','20'};% inside default values
                    options.Resize='on';
                    options.WindowStyle='modal';
                    options.Interpreter='tex';
                    answer=inputdlg(prompt,dlg_title,num_lines,...
                                    def);%related to point definition - careful when changed


                                fs =answer(1,1); %aproximate position (optical length) of starting (left) evaluation point
%                                 pause();
                                start_time =answer(2,1);
                                duration = answer(3,1);
                                fs = str2double(fs);
                                start_time = str2double(start_time);
                                duration = str2double(duration);

                                sstart_time=num2str(start_time);
                                dduration=num2str(duration);
                                

for ii = 1:numfiles % data input cycle
%     waitbar1 = waitbar(1, 'Realtion finished', 'Units', 'normalized', 'Position', [0.4 0.2 0.22 0.06]);
%                          pause(1);
    cd(filepath);
data = importdata(fileList(ii).name, ';' );
data=data.data(:,1);
ii %show file number
filename = (fileList(ii).name) % show file name
first_time= char(filename(1,21:length(filename)-11));%('testing-file-name)'
           
time_stamp=1/fs;
% time_stamp= time_stamp/60; %recalculated to minutes
time_vector = (0:time_stamp:((length(data)-1)*(time_stamp)))';    

%% DATA RECALCULATION
% pause();
% RECALCULATION of the file accordign to previous input
data = data((fs*start_time):(fs*(start_time+duration))-1);
time_vector=time_vector((fs*start_time):(fs*(start_time+duration))-1);


%% INICIALIZATION
 
 
%{
 %}
%%{
        wwidth=256;
        win=hamming(wwidth); % použité okno
        overlap=fix(wwidth/2); % překryv 
%         time_stamp=1/fs;
%         time_vector= (0:time_stamp:((length(data)-1)*(time_stamp)))';
        
        
            h1=figure ('name','Reference', 'Units', 'normalized','Position', [0.01 0.3 0.98 0.61]); % position normalized to the screen dimensions
                    set(0,'defaulttextinterpreter','none')   
                    hold on
                        plot(time_vector,data)
                        xlabel('Time [sec]')
                        ylabel('signal [Au]')
                        title(filename)
                        
                        legend('measured_signal')
%                          4annotation('textbox', [0.15 0.85 0.19 0.05], 'interpreter','none','FitBoxToText','on', 'String');
                              hold off
                        %plot([output,recoat],[threshold_ref,threshold_ref],'m')
                        %scatter(opticallength_ref(locsnew_ref),ERpeaknew_ref,'r')
                        hold off
                        
%% FFT COMPUTATION      
      
   t = 0:1/fs:1; % Time vector of 1 second 
        %overlap=0;
        X = fft(data,length(data));
        absx = abs(X);
        %X=absx;
        f1 = (0:length(data)/2-1)*fs/length(data); 
        
        %absx = absx';save fft2.txt absx -ASCII; 
 %% PLOT
        
    h2= figure('Name','Spektrum', 'Units', 'normalized','Position', [0.01 0.3 0.98 0.61]); % position normalized to the screen dimensions);
        init_plot_val=5;
        hold on
        plot(f1(init_plot_val:end),X(init_plot_val:(length(X)/2)));
        xlim([0 200])
        xlabel('Frequency [Hz]')
        ylabel('Spectral density [Au]')
        title(filename)
          
               legend('FFT of the signal - wind')
               annotation('textbox', [0.15 0.85 0.19 0.05], 'interpreter','none','FitBoxToText','on', 'String', [' Start Time/Duration [sec]:  ' sstart_time '/' dduration]);
                             
        hold off
     
        
%         h3=figure ('name','Spectrogram', 'Units', 'normalized','Position', [0.01 0.3 0.98 0.61]); % position normalized to the screen dimensions
%            hold on
%                     spectrogram(data,hamming(1024),overlap,wwidth,fs,'yaxis'); 
%                     colormap(bone);
% %                     xlabel('time [sec]')
% %                     ylabel('IFFT signal [Au]')
%                     title(filename)
%                         
% %                      legend(['Spectrogram of ' filename '  '  ''])
% %                      annotation('textbox', [0.15 0.85 0.24 0.05], 'interpreter','tex','FitBoxToText','on', 'String', [' Pass Filter: ' fmll '\leftrightarrow ' fmhh]);
%                          
%                      
%             hold off

%             ------------------------------------------------------------------------------------------------------------------------
            
  %%SAVING PROCESS
filename = filename(1:length(filename)-11);%'testing_file_name' % zkrácení názvu o přípony a formáty

waitbar_amount = ii/numfiles;
waitbar1 = waitbar(waitbar_amount, 'saving process ', 'Units', 'normalized', 'Position', [0.4 0.2 0.22 0.06]); %position of waitbar 
% saving_vector = numberAllocator();
% if saving_vector(1) == 1
%                         saveas(h1,['h1_plot_',filename],'png') % saves h plot (last calculated curve) as a png file. (the name is same as the original file - which CANNOT have the same_name.txt in the same folder!
%                        saveas(h1,['h1_plot_',filename],'fig')
%                        disp(' Figure 1 saved.') 
%         else    
%         end
%    waitbar1= waitbar(waitbar_amount);
       
                         saveas(h1,['h1_RAW_n0',filename],'png')
                         saveas(h1,['h1_RAW_n0',filename],'fig') 
                         
                            
   
   
                         saveas(h2,['h2_spectrum_n0',filename],'png')
                         saveas(h2,['h2_spectrum_n0',filename],'fig') 
                         
                            disp([,filename, ' has been saved']);
                            close(waitbar1)
            
% else
%    waitbar1 = waitbar(1, 'Realtion finished', 'Units', 'normalized', 'Position', [0.4 0.2 0.22 0.06]);
%                          pause(1);
%                          close(waitbar1)

% pause();
close all
end%input file end cycle
waitbar1 = waitbar(1, 'Realtion finished', 'Units', 'normalized', 'Position', [0.4 0.2 0.22 0.06]);
                         pause(1);
                         
% end
disp('Relation has been finished - go get a coffee ;) ');

close(waitbar1)           
